datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id      String    @id @default(cuid())
  name    String?
  email   String?   @unique
  emailVerified     DateTime?
  image   String?
  password String?
  role    UserRole @default(USER)
  account Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // Relations
  tasks           Task[]
  habits          Habit[]
  projects        Project[]
  goals           Goal[]
  journalEntries  JournalEntry[]
  codeSnippets    CodeSnippet[]
  knowledgeNotes  KnowledgeNote[]
  entertainmentItems EntertainmentItem[]
  wishlistItems   WishlistItem[]
  financeRecords  FinanceRecord[]

  @@map("users")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  priority    String  @default("MEDIUM")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  projectId   String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?  @relation(fields: [projectId], references: [id])
  @@map("tasks")
}

model Habit {
  id          String   @id @default(cuid())
  title       String
  description String?
  streak      Int      @default(0)
  frequency   String   @default("daily") // daily, weekly, monthly
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitEntries HabitEntry[]

  @@map("habits")
}

model HabitEntry {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  completed Boolean  @default(true)
  habitId   String

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@map("habit_entries")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      String @default("PLANNING")
  progress    Int           @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  tasks     Task[] 
  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model Goal {
  id          String     @id @default(cuid())
  title       String
  description String?
  category    String
  progress    Int        @default(0)
  targetDate  DateTime?
  status      GoalStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones Milestone[]

  @@map("goals")
}

model Milestone {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  goalId      String

  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model JournalEntry {
  id        String   @id @default(cuid())
  title     String
  content   String
  mood      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model CodeSnippet {
  id          String   @id @default(cuid())
  title       String
  description String?
  code        String
  language    String
  category    String?
  tags        String[] @default([])
  favorite    Boolean  @default(false)
  views       Int      @default(0)
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("code_snippets")
}

model KnowledgeNote {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String?
  tags      String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("knowledge_notes")
}

model EntertainmentItem {
  id          String            @id @default(cuid())
  title       String
  type        EntertainmentType
  status      WatchStatus       @default(WANT_TO_WATCH)
  rating      Int?
  genre       String?
  progress    Int               @default(0)
  totalEpisodes Int?
  currentEpisode Int?
  currentSeason Int?
  year        Int?
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("entertainment_items")
}

model WishlistItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       String?
  category    String?
  priority    String @default("MEDIUM")
  url         String?
  purchased   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wishlist_items")
}

model FinanceRecord {
  id          String      @id @default(cuid())
  title       String
  amount      Float
  type        FinanceType
  category    String?
  budgetCategory BudgetCategory?
  description String?
  date        DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("finance_records")
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

enum EntertainmentType {
  MOVIE
  TV_SHOW
  BOOK
  GAME
}

enum WatchStatus {
  WANT_TO_WATCH
  WANT_TO_PLAY
  WATCHING
  PLAYING
  COMPLETED
  ON_HOLD
  DROPPED
}

enum FinanceType {
  INCOME
  EXPENSE
}

enum BudgetCategory {
  NEEDS
  WANTS
  SAVINGS
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id  String  @id @default(cuid())
  
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}